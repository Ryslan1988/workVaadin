package ru.prominn.atombot.backend.document_form.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

import com.vaadin.annotations.AutoGenerated;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "T_CARD_NOTITFICABLE_SUPPLIERS")
public class TableCardNotifiableSuppliers implements Cloneable {

    /*
     * Document ID (GUID)
     * */

    @Column(name = "GUID")
//    @GeneratedValue(strategy = GenerationType.AUTO)
//    @OneToMany(fetch = FetchType.LAZY,
//              cascade = CascadeType.ALL)
    private String guid;

    /*
     * Document code.
     * The field is associated with
     * the ID field and participates
     * in the conversion of values
     * */
    @Column(name = "REGNUM")
    private String regNum;

    /*
     * Document template
     * */
    @Column(name = "TEMPLATE")
    private String template;

    /*
     * Document's name
     * */
    @Column(name = "DESCRIPTION")
    private String description;

    /*
     * Document deletion indicator
     * (X-document deleted)
     * */
    @Column(name = "DELETE_FLAG")
    private String deleteFlag;

    /*
     * Parent document ID 1
     * */
    @Column(name = "PARENT_DOC1")
    private String parentDoc1;

    /*
     * Document status
     * */
    @Column(name = "STATUS")
    private String status;

    /*
     * Document status text
     * */
    @Column(name = "STATUS_TEXT")
    private String statusText;

    /*
     * User who created the document
     * */
    @Column(name = "CREATED_BY")
    private String createdBy;

    /*
     * Document creation date
     * */
    @Column(name = "CREATED_DT")
    private String createdDate;

    /*
     * Document creation time
     * */
    @Column(name = "CREATED_TM")
    private String createdTime;

    /*
     * The user who changed
     * the document
     * */
    @Column(name =  "CHANGED_BY")
    private String changedBy;

    /*
     * Document change date
     * */
    @Column(name =  "CHANGED_DT")
    private String changedDate;

    /*
     * Document change time
     * */
    @Column(name =  "CHANGED_TM")
    private String changedTime;

    /*
     * Document closing date
     * */
    @Column(name =  "CLOSED_DT")
    private String closedDate;

    /*
     * Document closing time
     * */
    @Column(name =  "CLOSED_TM")
    private String closedTime;




    /* *id document*/
    @Id
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "ID")
    public String id;
    /* *number*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "NUM")
    public String num;

    /* *provider*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "LIFNR")
    public String lifnr;

    /* *provider name*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "LIFNR_NAME")
    private String lifnr_name;

    /* *e-mail*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "EMAIL")
    private String email;

    /* *invited supplier*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "INV_SUPP")
    private String inv_supp;

    /* *notificable supplier*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "NOT_SUPP")
    private String not_supp;

    /* *INN*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "STCD1")
    private String stcd1;

    /* *FIO HEAD*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "FIO_HEAD")
    private String fio_head;

    /* *executor*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "MANAGER_LOGIN")
    private String manager_login;

    /* *FIO_executor*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "FIO_EXEC")
    private String fio_exec;

    /* *notification sending status*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "EMAIL_STAT")
    private String email_stat;

    /* *position*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "FUNCTION")
    private String function;

    /* *position_d*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "FUNCTION_D")
    private String function_d;

    /* *FIO_HEAD_D*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "FIO_HEAD_D")
    private String fio_head_d;

    /* *gender*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "GESCH")
    private String gesch;

    /* *single provider*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "SINGL_LIFNR")
    private String singl_lifnr;

    /* *request TKP*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "ZTKP")
    private String ztkp;

    /* *ALTERNATIVE_EMAIL*/
    @NotNull
    @NotEmpty(message = "Поле не может быть пустым")
    @Column(name = "ALTERNATIVE_EMAIL")
    private String alternative_email;
}
